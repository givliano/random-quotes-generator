{"version":3,"sources":["../../markdown-previewer-page/src/App.js","../../markdown-previewer-page/src/serviceWorker.js","../../markdown-previewer-page/src/index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomQuote","Math","floor","random","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","quoteResponse","quotesJSON","randomNumber","wrap","_context","prev","next","fetch","sent","json","quotes","length","setState","active","author","quote","t0","console","log","randomColorPicker","stop","newQuoteHandler","_callee2","_context2","colors","randomColor","container","document","querySelector","newQuote","getElementById","tweetQuote","style","backgroundColor","background","state","color","undefined","react_default","createElement","className","id","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f877fc18.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      active: false,\n      author: '',\n      color: undefined,\n      quote: '',\n    };\n  };\n\n  randomQuote = () => {\n    return Math.floor(Math.random() * 10);\n  }\n\n  componentDidMount =  async () => {\n    try {\n      const quoteResponse = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n      const quotesJSON = await quoteResponse.json();\n      const randomNumber =  Math.floor(Math.random() * quotesJSON.quotes.length);\n      const randomQuote = quotesJSON.quotes[randomNumber];\n      this.setState({\n        active: true,\n        author: randomQuote.author,\n        quote: randomQuote.quote\n      })\n    } catch (e) {\n      console.log(e);\n    }\n    this.randomColorPicker();\n  }\n  \n   newQuoteHandler = async () => {\n    try {\n      const quoteResponse = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n      const quotesJSON = await quoteResponse.json();\n      const randomNumber =  Math.floor(Math.random() * quotesJSON.quotes.length);\n      const randomQuote = quotesJSON.quotes[randomNumber];\n      this.setState({\n        active: true,\n        author: randomQuote.author,\n        quote: randomQuote.quote\n      })\n    } catch (e) {\n      console.log(e);\n    }\n    this.randomColorPicker();\n  };\n\n  randomColorPicker = () => {\n    const colors = ['#A6E1FF', '#74E879', '#F1C2FF', '#EBB09B', '#FFEB8B',\n                    '#7C78B3', '#FFC6A3', '#C9C4FF', '#AACCA5', '#83BD7B'];\n    const randomNum = Math.floor((Math.random() * colors.length));\n    const randomColor = colors[randomNum];\n    const container = document.querySelector('.container');\n    const newQuote = document.getElementById('new-quote');\n    const tweetQuote = document.getElementById('tweet-quote');\n    container.style.backgroundColor = randomColor;\n    newQuote.style.background = randomColor;\n    tweetQuote.style.backgroundColor = randomColor;\n  }\n  \n\n  render () {\n    return (\n      <div className=\"container\">\n        <div id=\"quote-box\">\n          {this.state.active && <p id=\"text\">\"{this.state.quote}\"</p>}\n          {this.state.active && <p id=\"author\">- {this.state.author}</p>}\n          <div className=\"box-bottom\">\n            <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">Tweet</a>\n            <button id=\"new-quote\" onClick={this.newQuoteHandler}>New Quote</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}